# -*- coding: utf-8 -*-
"""heart2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kzw596ditMbEaVD-CohhH60CvqCBezXl
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import MinMaxScaler ,Normalizer
from sklearn.preprocessing import FunctionTransformer

from google.colab import files
data_to_load = files.upload()

#read data
df_train = pd.read_csv('heart.csv')
df_train.head(20)

X = df_train.iloc[:, :-1]
y = df_train.iloc[:, -1]

# Splitting data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.15, random_state = 0)

#Applying LogisticRegression Model 
LRModel= LogisticRegression(penalty='l2',solver='lbfgs', C=0.5,max_iter= 1000, random_state=10)
LRModel.fit(X, y)

score = cross_val_score(LRModel, X_train, y_train, cv=10, n_jobs=-1)
print("Score: ", score.max())

print("train Score: ", LRModel.score(X_train,y_train))

print("test Score: ", LRModel.score(X_test,y_test))

#Applying Prediction
y_pred = LRModel.predict(X_test)

#Calculating Confusion Matrix
CM = confusion_matrix(y_test, y_pred)
print('Confusion Matrix is : \n', CM)
print('Number of iterations = ' , LRModel.n_iter_)

print("Acurracy Score: ", accuracy_score(y_test,y_pred))